// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   ViewModel.tt
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls=WPAppStudio.Controls;
using Entities=WPAppStudio.Entities;
using EntitiesBase=WPAppStudio.Entities.Base;
using IServices=WPAppStudio.Services.Interfaces;
using IViewModels=WPAppStudio.ViewModel.Interfaces;
using Localization=WPAppStudio.Localization;
using Repositories=WPAppStudio.Repositories;
using Services=WPAppStudio.Services;
using ViewModelsBase=WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of Movie_DetailVideos ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class Movie_DetailVideosViewModel : ViewModelsBase.VMBase, IViewModels.IMovie_DetailVideosViewModel, ViewModelsBase.INavigable
    {       

		private readonly Repositories.Movie_Movie _movie_Movie;
		private readonly IServices.IDialogService _dialogService;
		private readonly IServices.INavigationService _navigationService;
		private readonly IServices.ISpeechService _speechService;
		private readonly IServices.IShareService _shareService;
		private readonly IServices.ILiveTileService _liveTileService;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="Movie_DetailVideosViewModel" /> class.
        /// </summary>
        /// <param name="movie_Movie">The Movie_ Movie.</param>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="speechService">The Speech Service.</param>
        /// <param name="shareService">The Share Service.</param>
        /// <param name="liveTileService">The Live Tile Service.</param>
        public Movie_DetailVideosViewModel(Repositories.Movie_Movie movie_Movie, IServices.IDialogService dialogService, IServices.INavigationService navigationService, IServices.ISpeechService speechService, IServices.IShareService shareService, IServices.ILiveTileService liveTileService)
        {
			_movie_Movie = movie_Movie;
			_dialogService = dialogService;
			_navigationService = navigationService;
			_speechService = speechService;
			_shareService = shareService;
			_liveTileService = liveTileService;
        }
		
	
		private EntitiesBase.YouTubeVideo _currentYouTubeVideo;

        /// <summary>
        /// CurrentYouTubeVideo property.
        /// </summary>		
        public EntitiesBase.YouTubeVideo CurrentYouTubeVideo
        {
            get
            {
				return _currentYouTubeVideo;
            }
            set
            {
                SetProperty(ref _currentYouTubeVideo, value);
            }
        }
	
		private bool _hasNextpanoramaMovie_DetailVideos0;

        /// <summary>
        /// HasNextpanoramaMovie_DetailVideos0 property.
        /// </summary>		
        public bool HasNextpanoramaMovie_DetailVideos0
        {
            get
            {
				return _hasNextpanoramaMovie_DetailVideos0;
            }
            set
            {
                SetProperty(ref _hasNextpanoramaMovie_DetailVideos0, value);
            }
        }
	
		private bool _hasPreviouspanoramaMovie_DetailVideos0;

        /// <summary>
        /// HasPreviouspanoramaMovie_DetailVideos0 property.
        /// </summary>		
        public bool HasPreviouspanoramaMovie_DetailVideos0
        {
            get
            {
				return _hasPreviouspanoramaMovie_DetailVideos0;
            }
            set
            {
                SetProperty(ref _hasPreviouspanoramaMovie_DetailVideos0, value);
            }
        }

        /// <summary>
        /// Delegate method for the TextToSpeechMovie_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void TextToSpeechMovie_DetailVideosStaticControlCommandDelegate() 
        {
				_speechService.TextToSpeech(CurrentYouTubeVideo.Title);
        }
		

        private ICommand _textToSpeechMovie_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the TextToSpeechMovie_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand TextToSpeechMovie_DetailVideosStaticControlCommand
        {
            get { return _textToSpeechMovie_DetailVideosStaticControlCommand = _textToSpeechMovie_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(TextToSpeechMovie_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the ShareMovie_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void ShareMovie_DetailVideosStaticControlCommandDelegate() 
        {
				_shareService.Share(CurrentYouTubeVideo.Title, "", CurrentYouTubeVideo.ExternalUrl, CurrentYouTubeVideo.VideoId);
        }
		

        private ICommand _shareMovie_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the ShareMovie_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand ShareMovie_DetailVideosStaticControlCommand
        {
            get { return _shareMovie_DetailVideosStaticControlCommand = _shareMovie_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(ShareMovie_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the PinToStartMovie_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void PinToStartMovie_DetailVideosStaticControlCommandDelegate() 
        {
				_liveTileService.PinToStart(typeof(IViewModels.IMovie_DetailVideosViewModel), CreateTileInfoMovie_DetailVideosStaticControl());
        }
		

        private ICommand _pinToStartMovie_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the PinToStartMovie_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand PinToStartMovie_DetailVideosStaticControlCommand
        {
            get { return _pinToStartMovie_DetailVideosStaticControlCommand = _pinToStartMovie_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(PinToStartMovie_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the GoToSourceMovie_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void GoToSourceMovie_DetailVideosStaticControlCommandDelegate() 
        {
				_navigationService.NavigateTo(string.IsNullOrEmpty(CurrentYouTubeVideo.ExternalUrl) ? null : new Uri(CurrentYouTubeVideo.ExternalUrl));
        }
		

        private ICommand _goToSourceMovie_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the GoToSourceMovie_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand GoToSourceMovie_DetailVideosStaticControlCommand
        {
            get { return _goToSourceMovie_DetailVideosStaticControlCommand = _goToSourceMovie_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(GoToSourceMovie_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the NextpanoramaMovie_DetailVideos0 command.
        /// </summary>
        public async void NextpanoramaMovie_DetailVideos0Delegate() 
        {
				LoadingCurrentYouTubeVideo = true;
			var next = await  _movie_Movie.Next(CurrentYouTubeVideo);

			if(next != null)
				CurrentYouTubeVideo = next;

			RefreshHasPrevNext();
        }
		
		
        private bool _loadingCurrentYouTubeVideo;
		
        public bool LoadingCurrentYouTubeVideo
        {
            get { return _loadingCurrentYouTubeVideo; }
            set { SetProperty(ref _loadingCurrentYouTubeVideo, value); }
        }

        private ICommand _nextpanoramaMovie_DetailVideos0;

        /// <summary>
        /// Gets the NextpanoramaMovie_DetailVideos0 command.
        /// </summary>
        public ICommand NextpanoramaMovie_DetailVideos0
        {
            get { return _nextpanoramaMovie_DetailVideos0 = _nextpanoramaMovie_DetailVideos0 ?? new ViewModelsBase.DelegateCommand(NextpanoramaMovie_DetailVideos0Delegate); }
        }

        /// <summary>
        /// Delegate method for the PreviouspanoramaMovie_DetailVideos0 command.
        /// </summary>
        public  void PreviouspanoramaMovie_DetailVideos0Delegate() 
        {
			var prev =  _movie_Movie.Previous(CurrentYouTubeVideo);

			if(prev != null)
				CurrentYouTubeVideo = prev;

			RefreshHasPrevNext();
        }
		

        private ICommand _previouspanoramaMovie_DetailVideos0;

        /// <summary>
        /// Gets the PreviouspanoramaMovie_DetailVideos0 command.
        /// </summary>
        public ICommand PreviouspanoramaMovie_DetailVideos0
        {
            get { return _previouspanoramaMovie_DetailVideos0 = _previouspanoramaMovie_DetailVideos0 ?? new ViewModelsBase.DelegateCommand(PreviouspanoramaMovie_DetailVideos0Delegate); }
        }

        private async void RefreshHasPrevNext()
        {
            HasPreviouspanoramaMovie_DetailVideos0 = _movie_Movie.HasPrevious(CurrentYouTubeVideo);
			HasNextpanoramaMovie_DetailVideos0 = await _movie_Movie.HasNext(CurrentYouTubeVideo);
			LoadingCurrentYouTubeVideo = false;
		}
		public object NavigationContext
        {
            set
            {              
                if (!(value is EntitiesBase.YouTubeVideo)) { return; }
                
                CurrentYouTubeVideo = value as EntitiesBase.YouTubeVideo;
                RefreshHasPrevNext();
            }
        }
        /// <summary>
        /// Initializes a <see cref="Services.TileInfo" /> object for the Movie_DetailVideosStaticControl control.
        /// </summary>
		/// <returns>A <see cref="Services.TileInfo" /> object.</returns>
        public Services.TileInfo CreateTileInfoMovie_DetailVideosStaticControl()
        {
            var tileInfo = new Services.TileInfo
            {
                CurrentId = CurrentYouTubeVideo.VideoId,
                Title = CurrentYouTubeVideo.Title,
                BackTitle = CurrentYouTubeVideo.Title,
                BackContent = string.Empty,
                Count = 0,
                BackgroundImagePath = CurrentYouTubeVideo.VideoImageUrl,
                BackBackgroundImagePath = CurrentYouTubeVideo.VideoImageUrl,
                LogoPath = "Logo-2304ce0a-3c98-453b-bb1b-5a0077d14161.png"
            };
            return tileInfo;
        }
    }
}
