// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   DataSource.tt
using System;
using System.CodeDom.Compiler;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Runtime.CompilerServices;
using Entities=WPAppStudio.Entities;
using RepositoriesBase=WPAppStudio.Repositories.Base;
using WPAppStudio.Shared;

namespace WPAppStudio.Repositories
{
    /// <summary>
    /// characters_charactersCollection data source.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public class characters_charactersCollection : Icharacters_charactersCollection 
    {
		private const int MaxResults = 10;
        private readonly ObservableCollection<Entities.charactersSchema> _data = new ObservableCollection<Entities.charactersSchema>
		{
          new Entities.charactersSchema
            {
                Id= new Guid("36d4523e-c7d7-4a74-bb0d-0c2cbc6a9ae6"),
                Title=@" อุซป (โซเงคิงแบบปลอมตัว)",
                Subtitle=@"เจ้าแห่งการซุ่มยิง, สร้างอาวุธต่างๆ",
                Image=@"\Images\Item-18732598-c961-4c52-be76-2624a096638b.jpg",
                Description=@"อุซปจ้าวแห่งการโกหก จมูกยาว แล้วก็ฉายา กัปตันอุซป หรือโซเงคิงนี่เอง",
			},
          new Entities.charactersSchema
            {
                Id= new Guid("5f8153c2-7a95-45d2-a07f-94573ee74004"),
                Title=@"แฟรงกี้ หรือ คาติฟูแลม",
                Subtitle=@"ช่างประจำเรือ",
                Image=@"\Images\Item-59c079ec-d0fd-4694-a05d-051f5039a92e.png",
                Description=@"เนื่องจากเจ้าหมอนี่มันคือ ไซบอร์คนั่นเอง และก็เป็นคนขี้ใจอ่อนร้องไห้ง่ายด้วยครับ",
			},
          new Entities.charactersSchema
            {
                Id= new Guid("2c3ff50b-e9e9-4830-8d61-49a19ad0b1ef"),
                Title=@"โทนี่ โทนี่ ช๊อปเปอร์",
                Subtitle=@"หมอ",
                Image=@"\Images\Item-06c9a43c-2029-4b0d-ad46-2672b7ce7f24.png",
                Description=@" เจ้ากวางตัวน้อยน่ารัก ซึ่งเป็นหมอ ของกลุ่มโจรสลัดหมวกฟาง",
			},
          new Entities.charactersSchema
            {
                Id= new Guid("79e7672d-8d0f-45f3-b97d-61e0683d6ef2"),
                Title=@"โรโรโนอา โซโล",
                Subtitle=@"หน่วยต่อสู้",
                Image=@"\Images\Item-64adfa64-3436-4256-9e5f-a7eadb299f33.png",
                Description=@"นักดาบ แห่งกลุ่มโจรสลัดหมวกฟาง ที่ชอบเดินหลงทางอยู่เป็นประจำ แต่มีความสามารถในการต่อสู้สูงมาก",
			},
          new Entities.charactersSchema
            {
                Id= new Guid("41ee9ca5-1e95-4677-a486-b44c2272fe83"),
                Title=@"ซันจิ",
                Subtitle=@"กุ๊ก",
                Image=@"\Images\Item-26399312-5468-440c-967b-21a31cdde201.jpg",
                Description=@"ผู้ที่ชอบสาวๆเป็นอย่างมาก และเป็นกุ๊ก ของกลุ่มโจรสลัดหมวกฟาง",
			},
          new Entities.charactersSchema
            {
                Id= new Guid("b678dbe3-8b0a-46b8-b4f2-f6d633fc3f7b"),
                Title=@"นามิ",
                Subtitle=@" ต้นหนเรือ",
                Image=@"\Images\Item-c3661fce-21a8-417c-a40e-26d3da5e0ca2.png",
                Description=@"ต้นหนเรือ และ ผู้หญิงที่รักสมบัติและเงินทองนั่นเอง",
			},
          new Entities.charactersSchema
            {
                Id= new Guid("b11572d2-bb4c-4927-8391-f960d41a60a1"),
                Title=@"นิโค โรบิน",
                Subtitle=@"นักโบราณคดี",
                Image=@"\Images\Item-5fe59c1b-846c-4569-b9c4-bbc7649f8fa5.png",
                Description=@" ผู้หญิงที่มีความรู้เรื่องประวัติศาตร์ และสามารถอ่านโพเนกลีฟได้ ของกลุ่มโจรสลัดหมวกฟาง",
			},
          new Entities.charactersSchema
            {
                Id= new Guid("032d10d0-eb1d-4b47-beef-b4434baca87c"),
                Title=@"มังกี้ ดี ลูฟี่",
                Subtitle=@"กัปตันเรือ",
                Image=@"\Images\Item-bb8a0595-70f6-4131-927d-dc1ed6697a90.jpg",
                Description=@"กัปตันเรือ กลุ่มโจรสลัดหมวกฟาง และตัวเอกของเรื่อง วันพีซ",
			},
          new Entities.charactersSchema
            {
                Id= new Guid("b328d8dd-ed88-4810-8bce-0d3df64ffa38"),
                Title=@"ฮัมมิ่ง บรู๊ค",
                Subtitle=@"นักดนตรี",
                Image=@"\Images\Item-8b5b6859-5171-4a88-a37c-a37898b07d57.jpg",
                Description=@"(นักดาบฮานาอุตะ"" บรูค)",
			},
		};
	
		
        /// <summary>
        /// Retrieves the data from a static data source, in an observable collection of charactersSchema items.
        /// </summary>
        /// <returns>An observable collection of charactersSchema items.</returns>
        public ObservableCollection<Entities.charactersSchema> GetData(int numPage)
        {								
			return new ObservableCollection<Entities.charactersSchema>(_data.Skip(MaxResults * numPage).Take(MaxResults));
        }
		
		/// <summary>
        /// Retrieves the data from a static data source, filtered by a filter specification, in an observable collection of charactersSchema items.
        /// </summary>
		/// <param name="filter">Filter operation specification</param>
        /// <returns>An observable collection of charactersSchema items.</returns>
        public ObservableCollection<Entities.charactersSchema> Search(FilterSpecification filter)
        {
            return RepositoriesBase.Filter<Entities.charactersSchema>.FilterCollection(filter, _data);
        }
		
		/// <summary>
        /// Checks if data source has a element before the passed as parameter
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>True, if there is a previous element, false if there is not</returns>
		public bool HasPrevious(Entities.charactersSchema current)
        {
            if (current == null || !_data.Any()) return false;

            return _data.IndexOf(current) > 0;
        }
		
		/// <summary>
        /// Checks if data source has a element after the passed as parameter
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>True, if there is a next element, false if there is not</returns>
		public bool HasNext(Entities.charactersSchema current)
        {
            if (current == null || !_data.Any()) return false;

            return _data.IndexOf(current) < _data.Count - 1;
        }
		
		/// <summary>
        /// Retrieves the previous element from source.
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>The previous element from items, if it exists. Otherwise, returns null</returns>
        public Entities.charactersSchema Previous(Entities.charactersSchema current)
        {
            if (current == null || !_data.Any()) return null;

            if (_data.First().Equals(current)) return null;

            return _data[_data.IndexOf(current) - 1];
        }
		
		/// <summary>
        /// Retrieves the next element from source.
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>The next element from items, if it exists. Otherwise, returns null</returns>
        public Entities.charactersSchema Next(Entities.charactersSchema current)
        {
            if (current == null || !_data.Any()) return null;

            if (_data.Last().Equals(current)) return null;

            return _data[_data.IndexOf(current) + 1];
        }
	}
}

